# Delete all: kubectl delete all,role,rolebinding,clusterrole,clusterrolebinding,pvc,sa -n ma -l app.kubernetes.io/component=image-bootstrap
apiVersion: v1
kind: ServiceAccount
metadata:
  name: helm-job-runner
  namespace: ma
  labels:
    app.kubernetes.io/component: image-bootstrap
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: helm-job-role
  namespace: ma
  labels:
    app.kubernetes.io/component: image-bootstrap
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["get", "list", "create", "delete", "watch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: helm-job-rolebinding
  namespace: ma
  labels:
    app.kubernetes.io/component: image-bootstrap
subjects:
  - kind: ServiceAccount
    name: helm-job-runner
    namespace: ma
roleRef:
  kind: Role
  name: helm-job-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: helm-job-create-namespaces
  labels:
    app.kubernetes.io/component: image-bootstrap
rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: helm-job-create-namespaces-binding
  labels:
    app.kubernetes.io/component: image-bootstrap
subjects:
  - kind: ServiceAccount
    name: helm-job-runner
    namespace: ma
roleRef:
  kind: ClusterRole
  name: helm-job-create-namespaces
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: image-bootstrap-pvc
  namespace: ma
  labels:
    app.kubernetes.io/component: image-bootstrap
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: batch/v1
kind: Job
metadata:
  generateName: image-bootstrap-
  labels:
    app.kubernetes.io/component: image-bootstrap
spec:
  backoffLimit: 0
  template:
    spec:
      serviceAccountName: helm-job-runner
      restartPolicy: Never
      volumes:
        - name: workspace-mount
          persistentVolumeClaim:
            claimName: image-bootstrap-pvc
      terminationGracePeriodSeconds: 0
      nodeSelector:
        eks.amazonaws.com/compute-type: auto
      # Pull GitHub repo and build images into registry
      containers:
        - name: image-bootstrap
          image: amazoncorretto:17-al2023
          env:
            - name: GRADLE_OPTS
              value: "-Xms512m -Xmx4g -Dorg.gradle.daemon=false"
            - name: REGISTRY_ENDPOINT
              value: "MA+REGISTRY"
          command:
            - sh
            - -c
          args:
            - |
              set +e
              yum update -y && yum install -y git findutils tar && yum clean all
              
              ARCH=$(uname -m)
                case "$ARCH" in
                aarch64)
                  ARCH="arm64"
                  ;;
                x86_64)
                  ARCH="amd64"
                  ;;
                *)
                  echo "Unsupported architecture: $ARCH"
                  exit 1
                ;;
              esac
      
              export ARCH
              export HELM_VERSION="3.14.0"
              export KUBECTL_VERSION="1.32.1"
      
              echo "Using architecture: $ARCH"
              echo "Helm version: $HELM_VERSION"
              echo "Kubectl version: $KUBECTL_VERSION"
              
              echo "Installing kubectl"
              curl -LO --retry 5 "https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/${ARCH}/kubectl" && \
              chmod +x kubectl && \
              mv kubectl /usr/local/bin/kubectl && \
              kubectl version --client
              
              echo "Installing helm"
              curl -LO --retry 5  "https://get.helm.sh/helm-v${HELM_VERSION}-linux-${ARCH}.tar.gz" && \
              tar -zxvf "helm-v${HELM_VERSION}-linux-${ARCH}.tar.gz" && \
              mv linux-${ARCH}/helm /usr/local/bin/helm && \
              rm -rf "helm-v${HELM_VERSION}-linux-${ARCH}.tar.gz" linux-${ARCH} && \
              helm version
              
              if [[ "$REGISTRY_ENDPOINT" == *"+"* ]]; then
                reg_endpoint="docker-registry:5000"
              else
                reg_endpoint="$REGISTRY_ENDPOINT"
              fi
              
              echo "Cloning repo from GitHub..."
              git clone --branch build-images-in-k8s https://github.com/lewijacn/opensearch-migrations.git /workspace
              cd /workspace
              ./gradlew buildImagesToRegistry -PregistryEndpoint="${reg_endpoint}" -PbootstrapPvc="image-bootstrap-pvc" -PskipConsoleBaseImageBuild
              tail -f /dev/null
          volumeMounts:
            - name: workspace-mount
              mountPath: /workspace