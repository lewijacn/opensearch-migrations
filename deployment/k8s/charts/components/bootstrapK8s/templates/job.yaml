apiVersion: batch/v1
kind: Job
metadata:
  namespace: {{ .Values.namespace }}
  name: bootstrap-k8s
  labels:
    app.kubernetes.io/component: bootstrap-k8s
spec:
  backoffLimit: 0
  template:
    spec:
      serviceAccountName: {{ .Values.serviceAccountName }}
      restartPolicy: Never
      volumes:
        - name: workspace-mount
          persistentVolumeClaim:
            claimName: {{ .Values.workspaceVolumePvc }}
        {{- if not .Values.cloneRepository }}
        - name: local-mount
          hostPath:
            path: /opensearch-migrations
            type: DirectoryOrCreate
        {{- end }}
      terminationGracePeriodSeconds: 0
      {{- if .Values.efsVolumeHandle }}
      nodeSelector:
        eks.amazonaws.com/compute-type: auto
      {{- end }}
      containers:
        - name: bootstrap-k8s
          image: amazoncorretto:17-al2023
          env:
            - name: GRADLE_OPTS
              value: "-Xms512m -Xmx4g -Dorg.gradle.daemon=false"
          command:
            - sh
            - -c
          args:
            - |
              set +e
              yum update -y && yum install -y git findutils tar unzip rsync && yum clean all
              
              ARCH=$(uname -m)
                case "$ARCH" in
                aarch64)
                  ARCH="arm64"
                  AWS_CLI_URL="https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip"
                  ;;
                x86_64)
                  ARCH="amd64"
                  AWS_CLI_URL="https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
                  ;;
                *)
                  echo "Unsupported architecture: $ARCH"
                  exit 1
                ;;
              esac
      
              export ARCH
              export HELM_VERSION="3.14.0"
              export KUBECTL_VERSION="1.32.1"
      
              echo "Using architecture: $ARCH"
              echo "Helm version: $HELM_VERSION"
              echo "Kubectl version: $KUBECTL_VERSION"
              
              echo "Installing AWS cli"
              curl -sSL "$AWS_CLI_URL" -o awscliv2.zip
              unzip awscliv2.zip
              ./aws/install
              rm -rf aws awscliv2.zip
              aws --version
              
              echo "Installing kubectl"
              curl -LO --retry 5 "https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/${ARCH}/kubectl" && \
              chmod +x kubectl && \
              mv kubectl /usr/local/bin/kubectl && \
              kubectl version --client
              
              echo "Installing helm"
              curl -LO --retry 5  "https://get.helm.sh/helm-v${HELM_VERSION}-linux-${ARCH}.tar.gz" && \
              tar -zxvf "helm-v${HELM_VERSION}-linux-${ARCH}.tar.gz" && \
              mv linux-${ARCH}/helm /usr/local/bin/helm && \
              rm -rf "helm-v${HELM_VERSION}-linux-${ARCH}.tar.gz" linux-${ARCH} && \
              helm version

              rm -rf /workspace/*
              rm -rf /workspace/.??*
              {{- if .Values.cloneRepository }}
              echo "Cloning repo from {{ .Values.repositoryUrl }} (branch: {{ .Values.repositoryBranch }})..."
              git clone --branch {{ .Values.repositoryBranch }} {{ .Values.repositoryUrl }} /workspace
              {{- else }}
              rsync -av --exclude=build --exclude=cdk.out --exclude=node_modules --exclude=.gradle --exclude=.idea --exclude=.git /local-workspace/ /workspace/
              {{- end }}
              cd /workspace

              GRADLE_CMD="./gradlew buildImagesToRegistry -PregistryEndpoint='{{ .Values.registryEndpoint }}' -PbootstrapPvc='{{ .Values.workspaceVolumePvc }}' -PskipConsoleBaseImageBuild"
              {{- if .Values.efsVolumeHandle }}
              GRADLE_CMD="$GRADLE_CMD -Pjib.auth.password=$(aws ecr get-login-password --region {{ .Values.awsRegion }})"
              {{- end }}
              echo "Running Gradle build with:"
              echo "$GRADLE_CMD" | sed -e 's/-Pjib\.auth\.password=[^ ]*/-Pjib.auth.password=[REDACTED]/g'
              eval "$GRADLE_CMD"

              tail -f /dev/null
          volumeMounts:
            - name: workspace-mount
              mountPath: /workspace
            {{- if not .Values.cloneRepository }}
            - name: local-mount
              mountPath: /local-workspace
              readOnly: true
            {{- end }}