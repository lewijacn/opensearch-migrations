conditionalPackageInstalls:
  snapshotVolume:
    enabled: true
  sharedConfigs:
    enabled: true
  migrationConsole:
    enabled: true
  bulkLoader:
    enabled: true
  kafka:
    enabled: true
  replayer:
    enabled: true
  captureProxy:
    enabled: true
  jaeger:
    enabled: false
  prometheus:
    enabled: false
  grafana:
    enabled: false
  source:
    enabled: true
  target:
    enabled: true

sharedConfigs:
  globalParameters:
    sourceCluster:
      allowRuntimeOverride: true
      object:
        endpoint: "http://sourcecluster.example.com:9200"
        allowInsecure: true
    kafkaBrokers:
      allowRuntimeOverride: false
      object:
        brokers: "captured-traffic-kafka-bootstrap.ma.svc:9092"



captureProxy:
  parameters:
    destinationUri:
      source: otherConfig
      configMapName: "source-cluster"
      configMapKey: "endpoint"
    insecureDestination:
      source: otherConfig
      configMapName: "source-cluster"
      configMapKey: "allowInsecure"
    kafkaConnection:
      source: otherConfig
      configMapName: "kafka-brokers"
      configMapKey: "brokers"


migrationConsole:
  snapshotVolumeEnabled: true
  snapshotVolumePvc: "snapshot-volume-pvc"

bulkDocumentLoader:
  snapshotVolumeEnabled: true
  snapshotVolumePvc: "snapshot-volume-pvc"
  parameters:
    snapshotName:
      source: parameterConfig
      value: rfs-snapshot
      allowRuntimeOverride: true
    targetHost:
      source: parameterConfig
      value: https://opensearch-cluster-master:9200
      allowRuntimeOverride: true

replayer:
  parameters:
    targetUri:
      source: parameterConfig
      value: https://opensearch-cluster-master.mcc:9200/
      allowRuntimeOverride: true
    kafkaTrafficBrokers:
      source: otherConfig  # eventually this will become a list from a shared config
      configMapName: "kafka-brokers"
      configMapKey: "brokers"

capturedTrafficKafkaCluster:
  environment: test

  clusterName: captured-traffic

  replicas: 1
  storageType: ephemeral
  storageSize: 100Gi
  storageDeleteClaim: true
  dedicatedController:
    replicas: 1
    storageSize: 10Gi

jaeger:
  allInOne:
    enabled: true
  provisionDataStore:
    cassandra: false
  storage:
    type: memory
  agent:
    enabled: false
  collector:
    enabled: false
  query:
    enabled: false

grafana:
  ## Grafana data sources configuration
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://prometheus-server.prometheus.svc.cluster.local:9090
          isDefault: true
          editable: true
        - name: Jaeger
          type: jaeger
          access: proxy
          url: http://jaeger-query.jaeger.svc.cluster.local:16686
          isDefault: false
          editable: true

  ## Set up the sidecar to import data sources (usually enabled by default)
  sidecar:
    datasources:
      enabled: true
    dashboards:
      enabled: true
      label: grafana_dashboard

source:
  imageTag: "7.10.2"
  image: "docker.elastic.co/elasticsearch/elasticsearch-oss"
  roles: [ master, data, ingest ]
  antiAffinity: "soft"
  esJavaOpts: "-Xmx128m -Xms128m"
  protocol: http
  # for simplest dev testing
  replicas: 2 # k8s replica count, not ES shard replicas
  createCert: false
  #  esConfig:
  #    elasticsearch.yml: |
  #      discovery.type: single-node

  minimumMasterNodes: 1
  extraEnvs:
    - name: path.repo
      value: "/snapshot"
  extraVolumes:
    - name: snapshot-volume
      persistentVolumeClaim:
        claimName: snapshot-volume-pvc  # Should match existing snapshot volume PVC
  extraVolumeMounts:
    - name: snapshot-volume
      mountPath: /snapshot

target:
  extraEnvs:
    - name: OPENSEARCH_INITIAL_ADMIN_PASSWORD
      value: myStrongPassword123!
  singleNode: true
  persistence:
    enabled: false

